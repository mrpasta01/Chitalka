package com.example.chetalka;

import static android.content.ContentValues.TAG;
import android.app.DownloadManager;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CursorAdapter;
import android.widget.FrameLayout;
import androidx.activity.EdgeToEdge;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import android.Manifest;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.provider.OpenableColumns;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import android.database.sqlite.*;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteCursor;
import android.database.sqlite.SQLiteQueryBuilder;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.documentfile.provider.DocumentFile;
import java.util.ArrayList;



// ТУТ БЫЛ МУСОР


public class MainActivity extends AppCompatActivity {
    private static final int REQUEST_CODE_OPEN_DOCUMENT = 1;
    Button firstBook, MenuTurnOnButton, OutSettingsButton, OutSoderzButton,InSettingsButton, InSoderzButton;
    FrameLayout File, Menu, Settings, Soderz;
    SQLiteDatabase db;
    TextView Book1,Book2,Book3; // Отвечают за надписи книг
    int index = 0;
    String Book = "NO"; // Базовое значение для книг
    Cursor ForBook; // Важно
    ArrayList<String> book_list = new ArrayList<String>();// Список книг
    Log Log = null;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_main);
        firstBook = findViewById(R.id.firstBook);
        MenuTurnOnButton = findViewById(R.id.MenuTurnOnButtonBoo);
        File = findViewById(R.id.File);
        Menu = findViewById(R.id.Menu);
        Settings = findViewById(R.id.Settings);
        Soderz = findViewById(R.id.Soderz);
        OutSettingsButton = findViewById(R.id.OutSettingsButton);
        OutSoderzButton = findViewById(R.id.OutSoderzButton);
        InSettingsButton = findViewById(R.id.InSettingsButton);
        InSoderzButton = findViewById(R.id.InSoderzButton);
        Soderz = findViewById(R.id.Soderz);
        Book1 = findViewById(R.id.Book1);
        Book2 = findViewById(R.id.Book2);
        Book3 = findViewById(R.id.Book3);

        openFile();
        db = getBaseContext().openOrCreateDatabase("app.db", MODE_PRIVATE, null);
        db.execSQL("CREATE TABLE IF NOT EXISTS book(NameBook TEXT, linkToFileDB TEXT, PositionInBook TEXT)");
        PustotaBook(); // Пустое значение для книг по умолчанию а то будет Книга1 Книга2 Книга3
    }
    public void openFile() {
        firstBook.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openFileChooser();
            }
        });
    }
    private void openFileChooser() {
        Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        intent.setType("*/*");

        startActivityForResult(intent, REQUEST_CODE_OPEN_DOCUMENT);
    }

    // Обработка результата выбора файла
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == REQUEST_CODE_OPEN_DOCUMENT && resultCode == RESULT_OK) {
            if (data != null) {
                Uri uri = data.getData();
                String fileType = getContentResolver().getType(uri); // Получаем MIME-тип файла

                // Проверка типа файла
                if (fileType != null &&
                        (fileType.equals("application/pdf") ||  // PDF файл
                                fileType.equals("application/vnd.openxmlformats-officedocument.wordprocessingml.document") ||  // DOCX файл
                                fileType.equals("text/plain") ||  // Текстовые файлы
                                fileType.equals("application/epub+zip") ||  // EPUB файл
                                fileType.equals("application/x-fictionbook+xml"))) {  // FictionBook файл

                    // Здесь вы можете обработать файл, если его тип соответствует одному из указанных
                    Toast.makeText(this, "Файл успешно выбран: " + uri.toString(), Toast.LENGTH_SHORT).show();
                    DocumentFile documentFile = DocumentFile.fromSingleUri(this, uri);
                    String path = getPathFromDocumentUri(documentFile); // В данном случае path это имя файла с расширением, а Uri это вся ссылка на файл

                    if (path != null) {
                        Toast.makeText(this, "Имя файла: " + path, Toast.LENGTH_SHORT).show();
                        db.execSQL("INSERT OR IGNORE INTO book VALUES ('" + path + "','"+ uri.toString().strip()+"', '0');");
                    } else {
                        Toast.makeText(this, "Не удалось получить путь к файлу.", Toast.LENGTH_SHORT).show();
                    }

                    // Ваш код для обработки файла здесь
                } else {
                    // Обработка случая, когда файл не соответствует ожидаемым типам
                    Toast.makeText(this, "Неподдерживаемый тип файла", Toast.LENGTH_SHORT).show();
                }
            }
        }
    }

    // Метод для получения пути к файлу
    private String getPathFromDocumentUri(DocumentFile documentFile) {
        try {
            return documentFile.getName(); // Возвращает имя файла
        } catch (Exception e) {
            Log.e(TAG, "Ошибка при получении имени файла: ", e);
            return null;
        }
    }
    public void MenuTurnOff(View view){
        File.setEnabled(true);
        Menu.setVisibility(View.INVISIBLE);
        File.setVisibility(View.VISIBLE);
    }
    public void MenuTurnOn(View view){
        File.setEnabled(false);
        Menu.setVisibility(View.VISIBLE);
    }
    public void InSettings(View view){
        Menu.setVisibility(View.INVISIBLE);
        File.setVisibility(View.INVISIBLE);
        Settings.setVisibility(View.VISIBLE);

    }
    public void OutSettings(View view){
        Settings.setVisibility(View.INVISIBLE);
        File.setVisibility(View.VISIBLE);
        Menu.setVisibility(View.VISIBLE);
    }

// ******************Начало вывода книг*******************

    public void Findebooks(){
        ForBook = db.rawQuery("SELECT NameBook FROM book;", null);
        while(ForBook.moveToNext()){
            book_list.add(ForBook.getString(0));
        }
        ReflectionData();
    }

    public void ReflectionData(){
        int num = 0;
        while (num<3) {
            if(index < book_list.size()){
                String Book = book_list.get(index);
                if(index%3 == 0) {
                    Book1.setText(Book);
                }
                if(index%3 == 1) {
                    Book2.setText(Book);
                }
                if(index%3 == 2) {
                    Book3.setText(Book);
                }
            }
            //System.out.printf("%s ", Login);
            //System.out.println(index);

            index++;
            num++;
        }
    }

    public void BackSpisokBook(View view){
        if(index>=0) {
            index -= 6;
            if(index == -3) {
                index = 0;
            }
            System.out.println(index);
            PustotaBook();
            ReflectionData();
        }
        if(index<=0){
            index = 0;
            PustotaBook();
            ReflectionData();
        }
    }

    public void NextSpisokBook(View view){
        if(index <= book_list.size()) {
            PustotaBook();
            ReflectionData();
        }
    }

    public void PustotaBook(){
        Book1.setText("");
        Book2.setText("");
        Book3.setText("");
    }

    public void InSoderz(View view){
        Menu.setVisibility(View.INVISIBLE);
        File.setVisibility(View.INVISIBLE);
        Soderz.setVisibility(View.VISIBLE);
        PustotaBook(); // заменяет текст книг нак пробел
        book_list.clear(); // очищает список книг
        index = 0;
        Findebooks();
    }

    public void ssilka(View view){
        TextView text = (TextView) view;
        Book = text.getText().toString();
        try {
            Cursor query = db.rawQuery("SELECT * FROM book WHERE NameBook = ?", new String[]{Book});
            while (query.moveToNext()) {
                String LinkBook = query.getString(1); // получение адреса книги из бд с именим книги на которую нажал пользователь
                System.out.println(LinkBook); // проверка на работу
            }
            query.close();
            // Здесь должна вызываться функция которая запускает открывание файла (Переменная Book глобальная)
            System.out.println(Book);
        }catch (Exception e){
            System.out.println(e);
        }
    }

//**********************Конец вывода книг*********************



    public void OutSoderz(View view){
        Soderz.setVisibility(View.INVISIBLE);
        File.setVisibility(View.VISIBLE);
        Menu.setVisibility(View.VISIBLE);
    }

}